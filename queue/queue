diff --git a/queue/main_queue_circular.c b/queue/main_queue_circular.c
index debbd4a..3e3a9d2 100644
--- a/queue/main_queue_circular.c
+++ b/queue/main_queue_circular.c
@@ -1,7 +1,8 @@
 #include "queue_circular_headers.h"
-#if 1
-#define IsQueueFull(__q)	__q.head->link == __q.tail
-#define IsQueueEmpty(__q)	__q.head == __q.tail
+
+#if 1 
+#define IsQueueFull(__q)	(__q)->head->link == (__q)->tail
+#define IsQueueEmpty(__q)	(__q)->head == (__q)->tail
 #else
 static bool IsQueueFull(const struct queue *q)
 {
@@ -26,7 +27,8 @@ static int enqueue(struct queue *q, int data)
 static int dequeue(struct queue *q)
 {
 	int data;
-	if (!IsQueueEmpty(q)) {
+	//if (!IsQueueEmpty(q)) {
+{
 		data = q->tail->data;
 		q->tail = q->tail->link;
 		return data;
@@ -67,17 +69,17 @@ int main(int argc, char **argp)
                         case 4: printf("Dequeue %d\n",dequeue(&q)); break;
                                 break;
                         case 5: display(&q); break; 
-                        case 6: if (IsQueueEmpty(q))
+                        case 6: if (IsQueueEmpty(&q))
                                         printf("Queue is Empty\n");
                                 else
                                         printf("Quueue is Not Empty\n");
                                 break;
-                        case 7: if (IsQueueFull(q))
+                        case 7: if (IsQueueFull(&q))
                                         printf("Queue is Full\n");
                                 else
                                         printf("Queue is not Full\n");
                                 break;
-                        default: return 0;
+                      default: return 0;
                 }
         } while(1);
 }
diff --git a/queue/queue_circular_headers.h b/queue/queue_circular_headers.h
index 4abbabc..9db90f0 100644
--- a/queue/queue_circular_headers.h
+++ b/queue/queue_circular_headers.h
@@ -10,7 +10,7 @@ struct node {
 struct queue {
 	struct node *head;
 	struct node *tail;
-	/* Optional */
+	// Optional
 	struct node *last;
 };
 int createQueue(struct queue *q, unsigned int len);
